<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <!-- Read this before publishing packages to chocolatey.org: https://github.com/chocolatey/chocolatey/wiki/CreatePackages -->
    <id>biicode</id>
    <title>biicode</title>
    <version>2.0.1</version>
    <authors>Biicode Innovation, S.L.</authors>
    <owners>Manu343726</owners>
    <summary>File-based C/C++ dependency manager</summary>
    <description>
**biicode: A cross-platform C/C++ dependency manager**

biicode provides file-based dependency management for C and C++ languages. Just `#include` what you need
and biicode will download, setup, and build the required libraries.

biicode uses [CMake](https://chocolatey.org/packages/cmake) under the hood, which makes easy adding existing projects to the biicode system, everything 
in a cross-platform way.

Always wanted the power of `pip` or `maven` when dealing with large C/C++ codebases? biicode is the tool for you.
    </description>
    <projectUrl>https://www.biicode.com</projectUrl>
    <iconUrl>http://i.imgur.com/tvC279C.png</iconUrl>
    <tags>development c c++ cmake biicode</tags>
    <copyright>Copyright (c) Biicode Innovation, S.L.</copyright>
    <licenseUrl>https://www.biicode.com/</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <releaseNotes>
## 2.0.1 (17-Dic-2014)

 - Premium accounts to store code privately and share alike.
 - New and simpler configuration in a single “biicode.conf” file, instead of several tiny files, and with more flexibility.
 - System for reusing CMake scripts. Now, CMakeLists.txt can automatically depend on existing CMake scripts, they will be automatically retrieved, versioned, shared, exactly as other source code files
 - Improved and simpler, CMake and build system, with Interface targets. Possibility of setting options to and configuring blocks you depend on.
 - Possible to specify #include mappings to blocks, so no modification at all is necessary in code.
 - Support for Arduino 1.5 for Yun board
 - Python hooks for custom tasks. Examples of hooks that automatically retrieve and configure system-wide some popular and large frameworks as OpenCV or Boost.
 - Blocks can use different variants, called “tracks” to choose and switch between lib versions or flavours. For example, can be used to maintain several development branches simultaneously as lasote/libuv(v1.0) and lasote/libuv(v0.10), and changing from one to the other does not require any change to code.
 - Web: See which blocks depend on your block in the requirements tab
 - Binary support to WXwidgets
 - New doc style and contents
    </releaseNotes>
    <dependencies>
      <dependency id="cmake"/>
    </dependencies>
  </metadata>
</package>